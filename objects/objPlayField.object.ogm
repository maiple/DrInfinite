# object

# event create -----------------------------------------------------------------

m_pid = 0;
m_width = 10;
m_hview = 20;
m_top = 0;
m_yview = 0;
m_scroll_yview_dst = 0
m_top_garbage = 0;
m_slide_time = 0;

m_grid = 0; // index [y, x]
m_init = false;

m_blocks = 0;
m_grid_surface = -4;

enum Mode
{
    waitdrop,
    drop,
    garbage,
    events,
    cascade,
    clear,
    scroll
}

m_mode = Mode.waitdrop
m_mode_wait_timer = 0;
m_drop_index = 0;
m_drop = [0, 0]
m_drop_x = 0
m_drop_y = 0
m_drop_spin = 0 // 0,2: vertical; 1,3: horizontal
m_drop_tick = 0 // for falling time
m_drop_tick_interval_max = 16;
m_drop_tick_interval = m_drop_tick_interval_max;
m_drop_tick_interval_min = 12;
m_view_margin = 5;
m_drop_scroll_margin = 5;
m_cascade_scroll_margin = 11;
m_scroll_y = 0 // fractional-point component of scroll only.
m_drop_spin_timer = 0;
m_emph_timer = 0;
m_cascade_interval = 8;

# event step -------------------------------------------------------------------

if (objControl.m_paused) exit;

m_highest_block_y = get_top();

if (!K_CAMERA_RIGID)
{
    // the highest point that can be scrolled to.
    // conventionally, it's the "top of the screen",
    // but it could be higher (lower-indexed) if the yview
    // is tracking something falling.
    m_yview_top = m_highest_block_y - m_view_margin;
}

handle_clear_animation();

// arrow animation
if (m_yview + m_hview + m_scroll_y < m_bottom)
{
    m_arrow_position+= 0.07;
}
else
{
    m_arrow_position-= 0.1;
}
m_arrow_position = clamp(m_arrow_position, 0, 1)

if (objControl.m_victory >= 0)
{
    exit;
}

if (m_next_drop_offset < 0)
{
    m_next_drop_offset += 2;
}

handle_bomb_timer();

if (m_wait_down_scroll_timer > 0 && global.key_down[m_pid, K_KEY_DOWN])
{
    m_wait_down_scroll_timer--;
    exit;
}
else
{
    m_wait_down_scroll_timer = 0;
}

if (m_emph_timer > 0)
{
    m_emph_timer--;
    exit;
}

if (m_emph_wait_scroll)
{
    m_emph_wait_scroll = !handle_scroll();
    exit;
}

switch (m_mode)
{
case Mode.waitdrop:
    m_mode_wait_timer++
    m_next_drop_offset = m_mode_wait_timer * K_GRID_SIZE * 1.5 / 8;

    if (m_mode_wait_timer >= 8)
    {
        m_mode = Mode.drop;
        m_hold_timer = 0;
        m_drop_spin_bonus_time = false;
        m_drop_spin_timer = 0;
        m_mode_wait_timer = 0;
        m_drop_x = m_width div 2 - 1
        m_drop_y = m_yview
        m_drop_spin = 1
        m_drop_spin_max_y = m_drop_y;
        m_drop = m_next_drop;
        m_slide_time = 0;
        m_slide_rotation_bonus = 0;
        m_next_drop = get_drop(m_drop_index++);
        m_next_drop_offset = -32;
        m_previous_top = m_highest_block_y;
        m_cascade_rigid_delta = 0;
    }
    break;
case Mode.drop:
    handle_drop();
    handle_scroll();
    break;
case Mode.events:
    if (handle_events())
    {
        m_mode = Mode.cascade;
        m_clear_groups = [undefined];
    }
    if (m_mode != Mode.cascade)
    {
        break;
    }
    m_mode_cascade_enable_scroll = false;
    m_cascade_timer = 0;
    m_cascade_rigid_delta = 0;
    // fallthrough
case Mode.cascade:
    m_cascade_timer++;
    if (m_cascade_timer % m_cascade_interval == 1)
    {
        if (handle_cascade())
        {
            m_mode = Mode.clear;
            m_mode_scroll_timer = 0;

            // don't scroll.
            break;
        }
    }
    handle_scroll();
    break;
case Mode.clear:
    if (K_CAMERA_RIGID)
    {
        // try scrolling (only) down before clearing.
        var scroll = handle_camera_rigid(true);
        if (scroll > 0)
        {
            // successfully scrolled down; try cascading.
            m_mode = Mode.cascade;
            m_mode_cascade_enable_scroll = false;
            m_emph_wait_scroll = true;
            m_cascade_timer = 0;
            break;
        }
    }

    // explode blocks.
    var clears_complete = handle_clears();

    if (clears_complete && K_CAMERA_RIGID)
    {
        // rigid camera updates here
        // can go both up and down this time.
        var scroll = handle_camera_rigid();
        m_cascade_rigid_delta += scroll;
        if (scroll > 0)
        {
            m_emph_wait_scroll = true;
            clears_complete = false;
        }
    }

    // aftermath
    if (!clears_complete)
    {
        // Not ready to move on to the next drop/garbage yet.
        m_mode = Mode.cascade;
        m_mode_cascade_enable_scroll = false;
        m_emph_timer = 16;
        m_cascade_timer = 0;

        // check for victory
        if (m_virus_count <= 0)
        {
            objControl.m_victory = m_pid;
            objControl.m_victory_timer = 200;
            m_emph_timer += 16;
            play_sound(sfxVictory);
        }
        break;
    }
    else
    {
        // No additional clears occurred -- tally up combos,
        // then move on to the next drop or garbage.
        if (m_clear_groups_c >= 2)
        {
            // details of the combo.
            var x_sum = 0;
            var types_c = 0;
            var types;

            // discern combo details from clear group information.
            for (var i = 0; i < m_clear_groups_c; ++i)
            {
                var group = m_clear_groups[i];
                // group is [type, length, xstart]
                types[types_c++] = group[0];
                x_sum += group[2];
            }

            // apply garbage to other groups.
            with (objPlayField)
            {
                if (m_pid != other.m_pid)
                {
                    m_garbage_buffer[m_garbage_buffer_c++] = [x_sum, types];
                }
            }

            play_sound(sfxCombo);
        }

        m_clear_groups_c = 0;
    }

    // clears complete.
    m_mode = Mode.scroll;
    m_post_scroll_emph = 0;

    if (!K_CAMERA_RIGID)
    {
        // if holding down, add a pause before scrolling up, to aid player visually.
        var scroll_up_distance = m_yview - max(m_highest_block_y, m_previous_top) + m_view_margin;
        if (scroll_up_distance > 0 && global.key_down[m_pid, K_KEY_DOWN])
        {
            m_wait_down_scroll_timer = 120;
            break;
        }
    }
    else
    {
        if (m_cascade_rigid_delta > 0)
        {
            m_post_scroll_emph = 32;
        }
    }
    break;
case Mode.scroll:
    if (handle_scroll())
    {
        m_emph_timer = m_post_scroll_emph;
        // switch to garbage mode if needed
        // otherwise go to waitdrop.
        if (m_garbage_buffer_c >= 1)
        {
            m_mode = Mode.garbage;
            m_garbage_drops_c = 0;
            m_garbage_timer = 0;
        }
        else
        {
            m_mode = Mode.waitdrop;
            m_mode_wait_timer = 0;
        }
    }
    break;
case Mode.garbage:
    if (m_garbage_timer == 0)
    {
        // Initialize. Place garbage.
        var garbage = m_garbage_buffer[m_garbage_buffer_c - 1];
        var x_sum = garbage[0];
        var types = garbage[1];
        var types_c = array_length_1d(types);

        var x_interval = m_width div types_c;

        // the possible phase shifts permitted given the intervals defined.
        var x_margin = (m_width - x_interval * types_c) + x_interval;

        // phase offset.
        var x_offset = x_sum mod max(1, x_margin);

        m_garbage_drops_c = 0;
        for (var i = 0; i < types_c; ++i)
        {
            var _x = x_offset + x_interval * i;
            var _y = m_yview_top - 1;
            var type = types[i];

            // skip this garbage if too close to the top.

            var skip = false;
            for (var j = 0; j < 3; ++j)
            {
                if (get_grid_at(_x, _y + j) != 0)
                {
                    skip = true;
                    break;
                }
            }
            if (!skip)
            {
                m_garbage_drops[m_garbage_drops_c++] = [type, _x, _y];
            }
        }

        // pop garbage from buffer.
        m_garbage_buffer_c--;
    }

    if (m_garbage_timer++ % m_cascade_interval == 0)
    {
        if (handle_garbage_drop())
        {
            // finished garbage drop.
            m_mode = Mode.events;
            m_emph_timer = 4;
            break;
        }
    }
    handle_scroll();
    break;
}

# event draw -------------------------------------------------------------------------

if (!m_init) exit;

var _xs = (window_get_width() / room_width)
var _ys = (window_get_height() / room_height)

if (m_grid_surface < 0 || !surface_exists(m_grid_surface))
{
    //m_grid_surface = surface_create(m_width * K_GRID_SIZE, (m_hview + 2) * K_GRID_SIZE);
}

// draw current view of board onto a surface.
if (m_grid_surface > 0)
{
    surface_set_target(m_grid_surface)
    draw_board(0, 0);
    surface_reset_target();
}

ogm_gpu_enable_scissor(
    x * _xs, y * _ys,
    (x + m_width * K_GRID_SIZE) * _xs,
    (y + m_hview * K_GRID_SIZE) * _ys
);

// draw grey background
draw_set_colour(c_dkgrey)
if (objControl.m_victory == m_pid)
{
    draw_set_colour(c_ltgrey);
}
draw_rectangle(0, 0, room_width, room_height, false);
draw_set_colour(c_white)

// draw rigid scroll markers.
if (K_CAMERA_RIGID)
{
    for (
        var y_rigid_marker = m_yview_top + K_CAMERA_RIGID_SCROLL_INTERVAL;
        y_rigid_marker <= m_yview_top + m_hview;
        y_rigid_marker += K_CAMERA_RIGID_SCROLL_INTERVAL
    )
    {
        // skip the last few because they don't make sense if there's a bottom.
        if (m_enable_bottom && y_rigid_marker > m_bottom - m_hview)
        {
            continue;
        }

        var _y = y_rigid_marker + K_CAMERA_RIGID_SCROLL_MERCY
        for (var _x = 0; _x < m_width; ++_x)
        {
            draw_sprite(
                sprRigidScrollMarker,
                0,
                x + _x * K_GRID_SIZE,
                y + (_y - m_yview - m_scroll_y) * K_GRID_SIZE
            );
        }
    }
}

// draw board
if (m_grid_surface > 0)
{
    draw_surface(x, y, m_grid_surface);
}
else
{
    draw_board(x, y);
}

// draw drop
if (m_mode == Mode.drop)
{

    var ghost_y = m_drop_y + 1;
    for (; ghost_y <= m_yview + m_hview + 2 && get_drop_free(m_drop_x, ghost_y, m_drop_spin); ghost_y++);
    ghost_y -= 1
    for (var _i = 0; _i < array_length_1d(m_drop); ++_i)
    {
        if (!is_string(m_drop[_i]))
        {
            var arr_ghost = get_drop_position(m_drop_x, ghost_y, m_drop_spin, _i);
            var _ghost_x = arr_ghost[0],  _ghost_y = arr_ghost[1];
            var draw_ghost_x = x + K_GRID_SIZE * _ghost_x;
            var draw_ghost_y = y + K_GRID_SIZE * (_ghost_y - m_yview - m_scroll_y)
            draw_block(
                draw_ghost_x,
                draw_ghost_y,
                m_drop[_i],
                false,
                false,
                0.3
            );
        }
    }

    for (var _i = 0; _i < array_length_1d(m_drop); ++_i)
    {
        var arr = get_drop_position(m_drop_x, m_drop_y, m_drop_spin, _i);
        var _x = arr[0], _y = arr[1];

        var _x_draw = x + K_GRID_SIZE * _x;
        var _y_draw = y + K_GRID_SIZE * (_y - m_yview - m_scroll_y)

        draw_block(
            _x_draw,
            _y_draw,
            m_drop[_i],
            true // highlight
        );

        if (m_drop_spin_timer != 0 && _i == 0 && array_length_1d(m_drop) > 1)
        {
            var subimage = clamp(floor(abs(m_drop_spin_timer) * 3), 0, 2);

            var angle = 90 * (m_drop_spin - 1);
            var yscale = -sign(m_drop_spin_timer);

            draw_sprite_ext(
                sprBlockRotationBlur, subimage,
                _x_draw + K_GRID_SIZE / 2,
                _y_draw + K_GRID_SIZE / 2,
                1, yscale, angle, get_block_colour(m_drop[1]), 1
            );

            draw_sprite_ext(
                sprBlockRotationBlur, subimage,
                _x_draw + K_GRID_SIZE / 2,
                _y_draw + K_GRID_SIZE / 2,
                1, yscale, angle, c_white, 0.5
            );
        }
    }




}

// draw garbage

if (m_mode == Mode.garbage)
{
    for (var _i = 0; _i < m_garbage_drops_c; ++_i)
    {
        var garbage = m_garbage_drops[_i];
        var type = garbage[0], _x = garbage[1], _y = garbage[2];

        if (is_undefined(type)) continue;

        var _x_draw = x + K_GRID_SIZE * _x;
        var _y_draw = y + K_GRID_SIZE * (_y - m_yview - m_scroll_y)

        draw_block(
            _x_draw,
            _y_draw,
            type,
            true // highlight
        );
    }
}

draw_clear_animation();

ogm_gpu_disable_scissor();

// draw bomb timer
var bomb_pid = [];
var bomb_p = [];
var bomb_p_c = 0;

// accumulate bomb timer p
with (objPlayField)
{
    var p = m_bomb_timer_hysteresis / m_bomb_timer_threshold;
    // slightly rescale p.
    p = (p  * (1.125) - 0.125);
    p = min(p, 1);

    bomb_pid[bomb_p_c] = m_pid;
    bomb_p[bomb_p_c] = p;
    bomb_p_c++;
}

if (bomb_p_c > 1)
{
    quicksort_by(bomb_pid, bomb_p)
}

var pre_x = x;
var my_post_x = x;
var bomb_ui_flash = objControl.m_round_timer div 30 mod 2;
for (var i = 0; i < bomb_p_c; ++i)
{
    var p = bomb_p[i];
    var pid = bomb_pid[i];

    if (p < 0) continue;

    if (i == 0)
    {
        var col = merge_colour(c_maroon, c_yellow, sqr(p));
        draw_set_colour(col);
        if (p >= 1 && !bomb_ui_flash)
        {
            draw_set_colour(c_red);
        }
        else if (m_defcon > 0 && bomb_ui_flash)
        {
            draw_set_colour(merge_colour(col, c_white, 0.5));
        }
    }
    else
    {
        draw_set_colour(make_color_hsv(0, 0, 80 + 50 * m_defcon / max(1, m_max_defcon - 1)));

        if (m_defcon > 0)
        {
            if (bomb_ui_flash)
            {
                draw_set_colour(c_ltgrey);
            }
        }
    }

    var post_x = clamp(x + m_width * p * K_GRID_SIZE, x, x + m_width * K_GRID_SIZE - 2);
    if (pid == m_pid)
    {
        // draw this again later but white.
        my_post_x = post_x;
    }

    if (post_x > pre_x);
    {
        draw_rectangle(pre_x, y - 4, post_x, y, false);
    }

    draw_set_colour(c_gray);
    draw_rectangle(post_x, y - 6, post_x + 2, y, false);
    pre_x = post_x + 2;
}

// emphasise our bomb timer.
draw_set_colour(c_white);
draw_rectangle(my_post_x, y - 8, my_post_x + 2, y, false);

if (m_defcon > 0)
{
    // draw index clock.
    var radius = 16;
    var centre_x = x + m_width * K_GRID_SIZE + radius + 4;
    var centre_y = y;
    draw_set_colour(c_grey);
    draw_circle(centre_x, centre_y, radius, false);
    draw_set_colour(c_black);
    draw_circle(centre_x, centre_y, radius - 2, false);
    draw_block(centre_x - 16, centre_y - 16, "ui-bomb")

    for (var p = 0; p < m_bomb_index_hysteresis; p += 0.01)
    {
        var index_x = centre_x - (radius - 1) * cos(p * tau)
        var index_y = centre_y - (radius - 1) * sin(p * tau)
        draw_set_colour(c_white);
        draw_rectangle(index_x - 2, index_y - 2, index_x + 1, index_y + 1, false);
    }
}

// draw virus count
draw_set_colour(c_white);
draw_set_valign(fa_bottom);
draw_text(x, y - 6, string(m_virus_count));

// draw next block
var _draw_next_x = x + K_GRID_SIZE * (m_width div 2 - 1);
var _draw_next_y = y - K_GRID_SIZE * 1.5 + m_next_drop_offset;
for (var i = 0; i < array_length_1d(m_next_drop); ++i)
{
    draw_block(_draw_next_x + i * K_GRID_SIZE, _draw_next_y, m_next_drop[i]);
}

// draw arrows if above bottom
if (m_enable_bottom)
{
    var offset = sqr(1 - min(m_arrow_position, 1));
    for (var i = 0; i < m_width; ++i)
    {
        draw_sprite(
            sprDownArrow,
            0,
            x + (i + 0.5) * K_GRID_SIZE,
            y + (m_hview + offset * 3.5) * K_GRID_SIZE
        )
    }
}

# event user0 ------------------------------------------------------------------
/// start a new round

// clear grid

m_top = 0;
m_grid = 0;
m_scroll_yview_dst = 0;
m_yview = 0;

// initialize grid as empty.
for (var i = 0; i < m_width; ++i)
{
    for (var j = m_top; j < m_top + m_hview; ++j)
    {
        m_grid[j - m_top, i] = 0
    }
}

m_virus_count = 0;

m_mode = Mode.waitdrop;
m_mode_wait_timer = 0;
m_drop_index = 0;
m_drop = [0, 0]; // an array of numbers or strings (e.g. "bomb")
m_events_c = 0;
m_scroll_y = 0
m_extra_clears_c = 0;
m_clears = [undefined]; // individual tiles cleared
m_clears_c = 0;
m_clear_groups = [undefined]; // rows/columns cleared. Stored as [type, length, x]
m_clear_groups_c = 0;
m_clear_masks = [undefined];
m_clear_masks_c = 0;
m_emph_timer = 0;
m_emph_wait_scroll = 0;
m_garbage_buffer_c = 0;

m_init = true;
m_hold_timer = 0;

// bottomless mode without this.
m_enable_bottom = true;
m_bottom = m_yview + m_hview;

// bombs
m_bomb_index = 1;
m_bomb_index_hysteresis = m_bomb_index;
m_bomb_timer_threshold = 60 * 43;
m_bomb_timer = -60 * 10;
m_bomb_timer_hysteresis = m_bomb_timer;
// number of players who have reached maximum bomb timer.
m_defcon = 0;
m_max_defcon = 0;

m_arrow_position = 0;
m_wait_down_scroll_timer = 0;

// remember previous block for high yview.
m_drop_high_hysteresis = 0
m_drop_high_hysteresis_type = [0, 0]
m_drop_high_hysteresis_bomb_redo = false;

m_yview_top = m_yview;

m_highest_block_y = get_top();

// get the next drop
m_next_drop = get_drop(m_drop_index++)
m_next_drop_offset = -8
