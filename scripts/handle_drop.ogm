/// handle_drop()
/// advance tick during drop

ogm_assert(object_index == objGroup, "handle_drop must be called from objGroup");

// set m_drop_tick_interval

m_drop_tick_interval = round((m_drop_tick_interval_max) / (1 + m_drop_index / 140));
if (m_drop_tick_interval < 9)
{
    m_drop_tick_interval = 9;
}

// handle rotation

var spin = global.key_pressed[m_pid, K_KEY_SPINL] - global.key_pressed[m_pid, K_KEY_SPINR]
var successful_spin = handle_spin(spin);

if (successful_spin)
{
    if (m_slide_time > 0)
    {
        m_slide_rotation_bonus = 4;
    }
}

if (abs(m_drop_spin_timer) > 0.1)
{
    m_drop_spin_timer -= sign(m_drop_spin_timer) * 0.1;
}
else
{
    m_drop_spin_timer = 0;
}

if (successful_spin)
{
    play_sound(sfxSpin);

    // motion blur
    m_drop_spin_timer = spin;

    // give bonus time for movement
    if (!m_drop_spin_bonus_time)
    {
        m_drop_tick = floor(min(m_drop_tick, m_drop_tick_interval / 2));
        m_drop_spin_bonus_time = true;
    }

    // orient drop
    if (!is_string(m_drop[0]))
    {
        m_drop[0] &= ~K_BLOCK_ROTATION;
        m_drop[1] &= ~K_BLOCK_ROTATION;
        switch(m_drop_spin)
        {
        case 0:
            m_drop[0] |= K_BLOCK_ROTATION_DOWN;
            m_drop[1] |= K_BLOCK_ROTATION_UP;
            break;
        case 1:
            m_drop[0] |= K_BLOCK_ROTATION_RIGHT;
            m_drop[1] |= K_BLOCK_ROTATION_LEFT;
            break;
        case 2:
            m_drop[0] |= K_BLOCK_ROTATION_UP;
            m_drop[1] |= K_BLOCK_ROTATION_DOWN;
            break;
        case 3:
            m_drop[0] |= K_BLOCK_ROTATION_LEFT;
            m_drop[1] |= K_BLOCK_ROTATION_RIGHT;
            break;
        }
    }
}

// handle x movement
var xmove = global.key_pressed[m_pid, K_KEY_RIGHT] - global.key_pressed[m_pid, K_KEY_LEFT]
var xhold = global.key_down[m_pid, K_KEY_RIGHT] - global.key_down[m_pid, K_KEY_LEFT];

var force_move = 0;
if (xhold != 0)
{
    if (m_hold_timer-- < 0)
    {
        m_hold_timer = 4;
        force_move = true;
    }
}

if ((xmove != 0 || force_move) && get_drop_free(m_drop_x + xhold, m_drop_y, m_drop_spin))
{
    m_drop_x += xhold;
    play_sound(sfxMove);

    if (xmove != 0)
    {
        m_hold_timer = 16;
    }
}

// handle y movement
m_drop_tick++
var interval = (global.key_down[m_pid, K_KEY_DOWN])
    ? m_drop_tick_interval div 4
    : m_drop_tick_interval;
var fastdrop = global.key_pressed[m_pid, K_KEY_DOWN];
var interval_elapsed = m_drop_tick >= interval

var slide_time_max = interval + 6 + m_slide_rotation_bonus;

var drop_obstructed = !get_drop_free(m_drop_x, m_drop_y + 1, m_drop_spin);

if (drop_obstructed)
{
    // not free.
    m_drop_spin_bonus_time = false;
    m_drop_tick = 0;
    m_drop_tick = 0;

    // allow some extra sliding time.
    if (m_slide_time++ >= slide_time_max)
    {
        // not free; apply drop to grid.
        for (var _i = 0; _i < array_length_1d(m_drop); ++_i)
        {
            var arr = get_drop_position(m_drop_x, m_drop_y, m_drop_spin, _i);
            var _x = arr[0], _y = arr[1];
            set_grid_at(_x, _y, m_drop[_i])
        }

        m_mode = Mode.events;

        // play sound
        play_sound(sfxLand);

        // don't scroll.
        exit;
    }
}
else if (interval_elapsed || fastdrop)
{
    // shift drop down (standard falling behaviour).
    m_drop_y++;
    m_drop_spin_max_y = m_drop_y;
    m_drop_spin_bonus_time = false;
    m_drop_tick = 0;
    m_slide_time = 0;
    m_slide_rotation_bonus = 0;
}

handle_scroll();
