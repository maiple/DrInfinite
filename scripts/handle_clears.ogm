/// handle_clears()
// returns true if no clears occurred.

ogm_assert(object_index == objGroup, "handle_clears must be called from objGroup")

var clears_c = 0;
var clears;

var virus_cleared = false;

// Look for blocks to clear.
// Note: since [gs]et_grid_at updates objControl.m_generated_to, there
// is a potential for an infinite loop here.
for (var _y = m_top; _y < objControl.m_generated_to; ++_y)
{
    for (var _x = 0; _x < m_width; ++_x)
    {
        var type = get_grid_at(_x, _y);
        if (type == 0) continue;
        if !(type & K_CLEAR_MARKER)
        {
            var colour = type & K_BLOCK_COLOUR;
            var clear_h = false;
            var clear_v = true;

            for (var _dir = 0; _dir <= 1; ++_dir)
            {
                var clearable = false;
                var clear_pass = false;
                while (true)
                {
                    for (var _i = 0; true; _i++)
                    {
                        // horizontal stop.
                        if (_dir == 0 && _i + _x >= m_width)
                        {
                            break;
                        }

                        var _x_check = _x + _i * (_dir == 0);
                        var _y_check = _y + _i * (_dir == 1);

                        var checktype = get_grid_at(
                            _x_check,
                            _y_check
                        );
                        var checkcolour = checktype & K_BLOCK_COLOUR;

                        if (colour != checkcolour)
                        {
                            break;
                        }

                        if (clear_pass)
                        {
                            // mark as clearing on the grid (if not already marked)
                            if !(K_CLEAR_MARKER & checktype)
                            {
                                set_grid_at(_x_check, _y_check, checktype | K_CLEAR_MARKER);

                                // add to clear list.
                                // TODO: i should be minimum of all i values for clears intersecting this block...
                                clears[clears_c++] = [_x_check, _y_check, _i];
                            }
                        }
                        else
                        {
                            if (_i >= K_CLEAR_SIZE - 1)
                            {
                                clearable = true;

                                // go to clear pass.
                                break;
                            }
                        }
                    }

                    // determine whether to loop one more time
                    // (to do a clear pass).
                    if (clear_pass || !clearable)
                    {
                        break;
                    }
                    else
                    {
                        clear_pass = true;
                    }
                }
            }
        }
    }
}

// add extra clears
for (var i = 0; i < m_extra_clears_c; ++i)
{
    var extra_clear = m_extra_clears[i];
    var _x = extra_clear[0];
    var _y = extra_clear[1];

    var _rand = frac(3000 * (_x - cos(_x * _y * 13)) * sin(_y * 113) * 4);
    if (_rand < 0) _rand++;

    var btype = get_grid_at(_x, _y);

    if (btype)
    {
        if !(btype & K_CLEAR_MARKER)
        {
            clears[clears_c++] = [_x, _y, 0, 0]
            set_grid_at(_x, _y, btype | K_CLEAR_MARKER);
        }
    }
    else
    {
        clears[clears_c++] = [_x, _y, 4 + round(_rand * 8)]
    }
}

m_extra_clears_c = 0;

// return true if any clears occurred.
if (clears_c == 0)
{
    return true;
}

// perform clears
for (var i = 0; i < clears_c; ++i)
{
    var arr = clears[i];
    var _x = arr[0];
    var _y = arr[1];
    var _clear_index = arr[2]

    if (_x < 0 || _x >= m_width)
    {
        continue;
    }
    if (_y < m_top || (m_enable_bottom && _y >= m_bottom))
    {
        continue;
    }

    // remove block.
    var btype = get_grid_at(_x, _y);
    set_grid_at(_x, _y, 0);
    m_clears[m_clears_c++] = [_x, _y, btype & ~K_CLEAR_MARKER, -_clear_index * K_CLEAR_ANIMATION_SPEED];

    if (btype & K_BLOCK_VIRUS)
    {
        virus_cleared = true;
        m_virus_count--;
    }

    // if oriented, remove orientation from neighbour.
    if (btype & K_BLOCK_ORIENTED)
    {
        var rotation = get_block_rotation(btype);
        var _x_check = _x + get_rotation_offset_x(rotation);
        var _y_check = _y + get_rotation_offset_y(rotation);
        var neighbour_type = get_grid_at(_x_check, _y_check)

        if (neighbour_type & K_BLOCK_ORIENTED)
        {
            if !(neighbour_type & K_CLEAR_MARKER)
            {
                if (neighbour_type & K_BLOCK_ROTATION == get_block_rotation_complement(btype))
                {
                    neighbour_type &= ~(K_BLOCK_ROTATION | K_BLOCK_ORIENTED);
                    set_grid_at(_x_check, _y_check, neighbour_type);
                }
            }
        }
    }
}

if (virus_cleared)
{
    play_sound(sfxExplosionVirus);

    // reset bomb timer.
    objControl.m_bomb_timer = 0;
}
else
{
    play_sound(sfxExplosion);
}

// some clears occurred.
return false;
