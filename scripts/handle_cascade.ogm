/// handle_cascade()
// returns true when cascade is complete.

ogm_assert(object_index == objPlayField, "handle_scroll must be called from objPlayField")

// check if anything falls.
var fall_coords;
var fall_coords_c = 0;
var next_row_fall_array;
next_row_fall_array[m_width - 1] = 0;
// have we scrolled up higher than the bottom?
var is_above_bottom = (!m_enable_bottom || m_yview_top + m_hview < m_bottom);
var first_row_free = K_CAMERA_RIGID && !K_CAMERA_RIGID_SCROLL_LOADBEARING && is_above_bottom;
var bottom = K_CAMERA_RIGID
    // check one extra tile at bottom if not loadbearing because blocks can
    // fall off the bottom of the screen.
    ? m_yview_top + m_hview + first_row_free
    : objControl.m_generated_to;
for (var _y = bottom - 1; _y > m_top; _y--)
{
    for (var _x = 0; _x < m_width; ++_x)
    {
        var type = get_grid_at(_x, _y);
        if (first_row_free) type = 0;
        var empty = (type == 0 || next_row_fall_array[_x]);
        next_row_fall_array[_x] = 0;

        // check for fall above.
        if (empty)
        {
            var can_fall = get_block_can_fall(_x, _y - 1, first_row_free);
            if (can_fall)
            {
                // check the above block is able to fall.
                // mark the block below it for falling.
                fall_coords[fall_coords_c++] = [_x, _y];
                next_row_fall_array[_x] = 1;
                set_grid_at(_x, _y - 1, get_grid_at(_x, _y - 1) | K_FALL_MARKER)
            }
        }
    }

    first_row_free = false;
}

if (fall_coords_c > 0)
{
    // perform cascades.
    for (var i = 0; i < fall_coords_c; ++i)
    {
        var arr = fall_coords[i];
        var _x = arr[0];
        var _y = arr[1];
        var btype = get_grid_at(_x, _y -1);

        // drop and remove fall marker
        // clear above block.
        set_grid_at(_x, _y - 1, 0);
        set_grid_at(
            _x, _y,
            btype & ~K_FALL_MARKER,
            K_CAMERA_RIGID
        );

        if (!K_CAMERA_RIGID)
        {
            // scroll camera
            var scroll_dst = _y - m_cascade_scroll_margin
            if (!m_mode_cascade_enable_scroll)
            {
                m_mode_cascade_enable_scroll = true;
                m_mode_cascade_scroll_y = scroll_dst;
            }
            else
            {
                m_mode_cascade_scroll_y = max(
                    m_mode_cascade_scroll_y,
                    scroll_dst
                )
            }
        }
    }
}
else
{
    return true;
}

return false;
