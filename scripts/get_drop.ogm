/// get_drop(index)

ogm_assert(object_index == objPlayField, "get_drop must be called from objPlayField")

var index = argument0;

// return bomb 1 in n times if bomb mode active.
if (m_defcon > 0)
{
    var interval = 6;
    if (m_defcon == m_max_defcon)
    {
        interval = 3;
    }
    m_bomb_index += 1/interval;

    var threshold = 0;
    // do the calculation this way for rounding error's sake.
    repeat (interval)
    {
        threshold += 1/interval;
    }

    if (m_bomb_index >= threshold)
    {
        // reset bomb counter
        m_bomb_index = 0;
        // alert high-pile-hysteresis that a bomb was dropped.
        m_drop_high_hysteresis_bomb_redo = true;
        return ["bomb"];
    }
}
else
{
    m_bomb_index = 1;
    m_bomb_index_hysteresis = 1;
}

// determine next drop normally by consulting master list, generating if needed.
while (index >= objControl.m_drops_list_c)
{
    var i = objControl.m_drops_list_c;
    var arr;

    for (var z = 0; z < 2; ++z)
    {
        var h = irandom(global.block_colours_c - 2) + 1;
        arr[z] = h
    }
    objControl.m_drops_list[i] = arr
    objControl.m_drops_list_c++;
}

var drop = objControl.m_drops_list[index];

// when y is very high, drop blocks
// in such a way as to make it hard for the tower to grow too high.
if (m_highest_block_y < -20)
{
    for (var i = 0; i <= 1; ++i)
    {
        if (m_drop_high_hysteresis == 2 * i
            && drop[i] != m_drop_high_hysteresis_type[1 - i]
            && !m_drop_high_hysteresis_bomb_redo)
        {
            m_drop_high_hysteresis_type[i] = drop[i];
        }

        if (m_drop_high_hysteresis_type[i] & K_BLOCK_COLOUR)
        {
            drop[i] = m_drop_high_hysteresis_type[i];
        }
    }

    if (!m_drop_high_hysteresis_bomb_redo)
    {
        m_drop_high_hysteresis = (m_drop_high_hysteresis + 1) % 4;
    }
}
else
{
    m_drop_high_hysteresis = 0;
    m_drop_high_hysteresis_type = [0, 0];
}
m_drop_high_hysteresis_bomb_redo = false;

// orient drop
drop[0] |= K_BLOCK_ORIENTED
drop[1] |= K_BLOCK_ORIENTED
drop[0] |= K_BLOCK_ROTATION_RIGHT
drop[1] |= K_BLOCK_ROTATION_LEFT

// hinge block 0
drop[0] |= K_BLOCK_HINGE

return drop;
